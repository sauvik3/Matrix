# Adapted from various sources
dist: trusty
sudo: false
language: cpp

# Test matrix:
# - Build matrix per compiler: C++11/C++14 + Debug/Release
# - Optionally: AddressSanitizer (ASAN)
# - Valgrind: all release builds are also tested with valgrind
# - clang 3.4, 3.5, 3.6, trunk
#   - Note: 3.4 and trunk are tested with/without ASAN,
#     the rest is only tested with ASAN=On.
# - gcc 4.9, 6.0
#
matrix:
  include:
   
    # Test gcc-4.8: C++11, Build=Debug/Release, ASAN=Off
    - env: GCC_VERSION=4.8 BUILD_TYPE=Debug CPP=11 ASAN=Off LIBCXX=Off
      os: linux
      addons: &gcc48
       apt:
        packages:
            - g++-4.8
            - valgrind
        sources:
            - ubuntu-toolchain-r-test

    - env: GCC_VERSION=4.8 BUILD_TYPE=Release CPP=11 ASAN=Off LIBCXX=Off
      os: linux
      addons: *gcc48
      
    # Test gcc-6: C++11, Build=Debug/Release, ASAN=Off
    - env: GCC_VERSION=6 BUILD_TYPE=Debug CPP=11 ASAN=Off LIBCXX=Off
      os: linux
      addons:
       apt:
        packages:
            - g++-6
            - clang-5.0
            - valgrind
        sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-5.0
    
    - env: GCC_VERSION=6 BUILD_TYPE=Release CPP=11 ASAN=Off LIBCXX=Off
      os: linux
      addons: *gcc-6

# Install dependencies
before_install:
  - export CHECKOUT_PATH=`pwd`;
  - export CXX="g++-${GCC_VERSION}" CC="gcc-${GCC_VERSION}";
  - export CXX="clang++-${CLANG_VERSION}" CC="clang-${CLANG_VERSION}";
  - if [ "$CLANG_VERSION" == "3.4" ]; then export CXX="/usr/local/clang-3.4/bin/clang++" CC="/usr/local/clang-3.4/bin/clang"; fi
  - which $CXX
  - which $CC
  - which valgrind
  - if [ -n "$CLANG_VERSION" ]; then sudo CXX=$CXX CC=$CC ./tests/install_libcxx.sh; fi
  - pip install --user cpp-coveralls

install:
  - cd $CHECKOUT_PATH

  # Workaround for valgrind bug: https://bugs.kde.org/show_bug.cgi?id=326469.
  # It is fixed in valgrind 3.10 so this won't be necessary if someone
  # replaces the current valgrind (3.7) with valgrind-3.10
  - sed -i 's/march=native/msse4.2/' Makefile

  - if [ ! -d build ]; then mkdir build; fi
  - export CXX_FLAGS="-I${CHECKOUT_PATH}/include"
  - export CXX_LINKER_FLAGS=""
  - if [ -z "$BUILD_TYPE" ]; then export BUILD_TYPE=Release; fi
  - if [ "$ASAN" == "On"]; then export CXX_FLAGS="${CXX_FLAGS} -fsanitize=address,undefined,integer -fno-omit-frame-pointer -fno-sanitize=unsigned-integer-overflow"; fi
  - if [ -n "$CLANG_VERSION" ]; then CXX_FLAGS="${CXX_FLAGS} -D__extern_always_inline=inline"; fi
  - if [ "$LIBCXX" == "On" ]; then CXX_FLAGS="${CXX_FLAGS} -stdlib=libc++ -I/usr/include/c++/v1/"; fi
  - if [ "$LIBCXX" == "On" ]; then CXX_LINKER_FLAGS="${CXX_FLAGS} -L/usr/lib/ -lc++"; fi
  - CXX_FLAGS="${CXX_FLAGS} -std=c++${CPP}"

script:
  # Builds
  - if [ "$BUILD_TYPE" == "Release" ]; then make all CXXFLAGS="${CXX_FLAGS} ${CXX_LINKER_FLAGS}" VERBOSE=1; export BIN=Bench/bin/main; fi
  - if [ "$BUILD_TYPE" == "Debug" ]; then make all CXXFLAGS="${CXX_FLAGS} ${CXX_LINKER_FLAGS}" VERBOSE=1; export BIN=Bench/bin/main; fi
  - valgrind --tool=memcheck --leak-check=yes --show-reachable=yes --num-callers=20 --track-fds=yes --trace-children=yes ./"${BIN}"
  
after_success:
  - coveralls --root .

notifications:
  email: false
